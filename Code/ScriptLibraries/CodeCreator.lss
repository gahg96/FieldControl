'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare 
'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Function createCode(actType As Integer,actTarget As String, actData As Variant)
Declare Sub ccMakeStrFromArray(value As Variant, toString As String)			
Declare Function ccreplaceChars(charToFind As String,Byval targetString As String, substr As String) As String
Declare Sub Initialize

'++LotusScript Development Environment:2:5:(Declarations):0:10
' Code generation
Dim generateCode As Variant
Const cADDSTRING=0
Const cSETITEMFLAGS=1
Const cSETITEMFLAGSrich=11
Const cNEWITEM=20
Const cNEWITEMtext=21
Const cNEWITEMdate=22
Const cNEWITEMnumber=23
Const cNEWITEMrich=24
Const cMODIFYITEM=3
Const cMODIFYITEMrich=34
Const cKILLITEM=4
Const cADDPRECODE=5
Const cADDPOSTCODE=6
Const cRETPRECODE=51
Const cRETPOSTCODE=61
' End code gen

Const eol=|
|

Const PRECODE=|
sub ProcessCollection
' Don't forget to insert Call ProcessCollection somewere in your code !
Dim col As notesDocumentCollection, doc As notesDocument
Dim item As notesItem, rtitem As notesRichTextItem
Dim i as Long, arr As Variant 
dim ses as new notesSession

set col=ses.currentDatabase.unprocessedDocuments
for i=1 to col.count
set doc=col.getNthDocument(i)
' ------ Start items processing
|
Const POSTCODE=|
' ------ End items processing
' call doc.save(true,true)           ' Uncomment it to save changes to document
next
end sub |

Const PRECODE2=|
Function fcProcessCollection as string 							' returns occured error text or empty string if there was no error
'This code generated by FieldControl for R5/R6 v1.0 http://www.notes-fc.com
	Dim col As notesDocumentCollection, doc As notesDocument
	Dim i As Integer, status As String
	Dim ses As New notesSession
	
	Set col=ses.currentDatabase.unprocessedDocuments
	For i=1 To col.count
		Set doc=col.getNthDocument(i)
		status=fcDocProcess(doc)
		If status>"" Then
			Print "ERROR: "+Status+" at line: "+Cstr(Erl)
			fcProcessCollection=status
			Exit Function
		End If
	Next
End Function

Function fcDocProcess(doc As NotesDocument) As String  			'input - NotesDocument to operate on, output - occurred error text or empty string if there was no error
' Don't forget to insert "Call fcProcessCollection" or "Call fcDocProcess" in your code and uncomment "Call doc.save" in fcDocProcess!
	Dim item As notesItem, rtitem As Variant,  arr As Variant 
	
	On Error Goto errHandler
' ------ Start items processing
|

Const POSTCODE2=|
' ------ End items processing
	Messagebox "WARNING: Changes to the document were NOT saved; uncomment the suitable line in the code.",0,"Save warning"
' call doc.save(true,true)           ' Uncomment it to save changes to the document and to delete MessageBox warning above.
errExit:
	Exit Function
errHandler:
	fcDocProcess=Error$
	Resume errExit
' This code produced by FieldControl for R5/R6 v1.0 http://www.notes-fc.com
End Function |


'++LotusScript Development Environment:2:1:createCode:1:8
Function createCode(actType As Integer,actTarget As String, actData As Variant)
	Dim outString As String	
'	Print "INPUT data:";actType;actTarget;Cstr(actData)
	If Not generateCode Then Exit Function
	
	Const lsFVA={arr=evaluate(|#|)}
	Const lsFV={arr=# }
	Const lsAIV={set item=doc.appendItemValue("#",arr)}
	Const lsRIV={set item=doc.ReplaceItemValue("#",arr)}
	Const lsKI={call doc.RemoveItem("#")}
	Const lsCRTI=|set rtItem=doc.CreateRichTextItem("#")|
	Const lsGRTI=|set rtitem=doc.GetFirstItem("#")|
	Const lsRRTIV=|rtitem.values=arr|
	
	If actTarget>"" Then
		outString=eol+outString+"' Code for "+Ucase(actTarget)+" item"+eol
	End If
	
' convert actData to @formula string
	Const maxText = 15360 \ 2 - 128
	Const maxWarning = "--- ITEM TOO LARGE TO BE PROCESSED CORRECTLY: "
	If Not Isnull(actData) And (actType=cNEWITEM Or actType=cNEWITEMrich Or actType=cMODIFYITEM Or actType=cMODIFYITEMrich) Then
		Dim actData4arr As String
		If Isarray(actData) Then ' rich item values return no array
			Forall oneVal In actData
				Call ccMakeStrFromArray(oneVal,actData4Arr)
				If Len(actData4arr) >= maxText Then ' just like in superform
					Call ccMakeStrFromArray(maxWarning + actTarget,actData4Arr)					
					Print maxWarning + actTarget
					Exit Forall
				End If
			End Forall
			If Ubound(actData)>0 Or Datatype(actData(0))=7 Then   ' 7 is date/time
				outString=outString+ccreplaceChars("#",lsFVA,actData4arr)+eol
			Else
				outString=outString+ccreplaceChars("#",lsFV,actData4Arr)+eol  ' #1 same as #2
			End If
		Else
			Call ccMakeStrFromArray(actData,actData4Arr)
			If Len(actData4arr) >= maxText Then ' just like in superform
				Print maxWarning + actTarget
				actData4arr = Left(actData4arr, maxText) + maxWarning  + actTarget + "|"
			End If
			outString=outString+ccreplaceChars("#",lsFV,actData4Arr)+eol ' #2 same as #1
		End If
'		Print outString
	End If
' end convert 	
	
	Select Case actType
	Case cNEWITEM:
		outString=outString+ccreplaceChars("#",lsAIV,actTarget)+eol
	Case cNEWITEMrich:
		outString=outString+"' NOTE: this code does not handle Rich Text formating information"+eol
		outString=outString+ccreplaceChars("#",lsCRTI,actTarget)+eol
		outString=outString+lsRRTIV+eol
	Case cMODIFYITEM:
		outString=outString+ccreplaceChars("#",lsRIV,actTarget)+eol
	Case cMODIFYITEMrich:
		outString=outString+"' NOTE: this code does not handle Rich Text formating information"+eol
		outString=outString+ccreplaceChars("#",lsGRTI,actTarget)+eol
		outString=outString+lsRRTIV+eol
	Case cKILLITEM:
		outString=outString+ccreplaceChars("#",lsKI,actTarget)+eol
	Case cADDSTRING:
		outString=actData+eol
'		outString=outString+actTarget+eol
	Case cADDPRECODE:
		outString=outString+PRECODE+eol
	Case cADDPOSTCODE:
		outString=outString+POSTCODE+eol
	Case cSETITEMFLAGS,cSETITEMFLAGSrich:
		Dim itname As String
		If actType=cSETITEMFLAGSrich Then itName="rtitem" Else itName="item"
		If Instr(actData,"IsAuthors")>0 Then outString=outString+itname+".IsAuthors=True"+eol
		If Instr(actData,"IsEncrypted")>0 Then  outString=outString+itname+".IsEncrypted=True"+eol
		If Instr(actData,"IsNames")>0 Then  outString=outString+itname+".IsNames=True"+eol
		If Instr(actData,"IsProtected")>0 Then  outString=outString+itname+".IsProtected=True"+eol
		If Instr(actData,"IsReaders")>0 Then  outString=outString+itname+".IsReaders=True"+eol
		If Instr(actData,"IsSigned")>0 Then  outString=outString+itname+".IsSigned=True"+eol
		If Instr(actData,"IsSummary")>0 Then  outString=outString+itname+".IsSummary=True"+eol
		If Instr(actData,"SaveToDisk")>0 Then  outString=outString+itname+".SaveToDisk=True"+eol
	Case cRETPRECODE:
		actDATA=PRECODE2
		outString=PRECODE2
	Case cRETPOSTCODE:
		actDATA=POSTCODE2
		outString=POSTCODE2
	End Select
'	Messagebox outString
'	dispDoc.code=dispDoc.code(0)+outString
	createCode=outString
End Function
'++LotusScript Development Environment:2:2:ccMakeStrFromArray:1:8
Sub ccMakeStrFromArray(value As Variant, toString As String)			
	Static nextSep As String, prevCR As Long ' Integer
	Dim newStr As Variant
	Dim eol As String
	eol=|
|
'	Print "DATATYPE:";Datatype(Value);" VAL:";Value
	newStr=False
	If Len(toString)=0 Then
		prevCR=0
		nextSep=":"
		newStr=True
	End If
	If Len(toString)>0 Then toString=toString+nextSep
	Select Case Datatype(Value)
		' see consts from lsconst.lss
	Case 5: 'number
		toString=toString+Cstr(Value)
	Case 8: 'string	
		If Instr(value,eol)>0 Then
			value=ccreplaceChars("|",value,"||")
			toString=toString+"|"+Value+"|"				'multiline strings delimited by pipe 
		Else
			value=ccreplaceChars(|"|,value,|""|)
			toString=toString+|"|+Value+|"|				'single line strings delimited by quotes
		End If
	Case 7: 'date/time
		toString=toString+|[|+Cstr(Value)+|]|
	End Select
	If Len(toString)-prevCR>512 Then ' max length for string in Notes Lotus Script is 1023 ?
		nextSep=|
	:|
		prevCR=Len(toString)
	Else
		nextSep=":"
	End If
'	Print "out 4arr"
End Sub
'++LotusScript Development Environment:2:1:ccreplaceChars:1:8
Function ccreplaceChars(charToFind As String,Byval targetString As String, substr As String) As String
	Dim crlf As Long 'Integer
	
	crlf=Instr(targetString,charToFind)
	While (crlf>0)  And (Len(targetString)>0) 
'		Print crlf; Len(targetString)
		Select Case crlf
		Case 1
'			Print "case1"
			targetString=substr & Right(targetString,Len(targetString)-1)
		Case Len(targetString)
'			Print "case2"
			targetString=Left(targetString,crlf-1) & substr 
		Case Else
'			Print "case3"
			targetString=Left(targetString,crlf-1) & substr & Right(targetString,Len(targetString)-crlf)                              
		End Select           
		crlf=Instr(crlf+Len(substr),targetString,charToFind)
	Wend
	ccreplaceChars=targetString
End Function
'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	generateCode=True
End Sub